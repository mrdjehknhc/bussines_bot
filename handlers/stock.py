from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from database import add_product, get_all_products, update_product, delete_product, get_product_by_name
from keyboards.inline import get_products_keyboard
from utils.filters import extract_stock_data

class AddProduct(StatesGroup):
    name = State()
    variations = State()
    price = State()
    delivery_cost = State()
    include_delivery = State()
    date = State()

# /–¥–æ–±–∞–≤–∏—Ç—å_–ø–æ–∑–∏—Ü–∏—é
async def cmd_add_position(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await AddProduct.name.set()

async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç / —Ä–∞–∑–º–µ—Ä / –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ø–æ —Å—Ç—Ä–æ—á–∫–∞–º):\n–ü—Ä–∏–º–µ—Ä:\n–ë–µ–ª—ã–π / M / 20\n–ß—ë—Ä–Ω—ã–π / L / 30")
    await AddProduct.variations.set()

async def process_variations(message: types.Message, state: FSMContext):
    await state.update_data(variations=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞–∫—É–ø–∞ –∑–∞ 1 –µ–¥:")
    await AddProduct.price.set()

async def process_price(message: types.Message, state: FSMContext):
    await state.update_data(price=float(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤—Å–µ–π –ø–∞—Ä—Ç–∏–∏:")
    await AddProduct.delivery_cost.set()

async def process_delivery(message: types.Message, state: FSMContext):
    await state.update_data(delivery=float(message.text))
    await message.answer("–£—á–∏—Ç—ã–≤–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –≤ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏? (–î–∞ / –ù–µ—Ç)")
    await AddProduct.include_delivery.set()

async def process_include_delivery(message: types.Message, state: FSMContext):
    await state.update_data(include_delivery=message.text.lower() == "–¥–∞")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '—Å–µ–≥–æ–¥–Ω—è':")
    await AddProduct.date.set()

async def process_date(message: types.Message, state: FSMContext):
    data = await state.get_data()
    name = data['name']
    variations = extract_stock_data(data['variations'])
    price = data['price']
    delivery = data['delivery']
    include_delivery = data['include_delivery']
    date = message.text if message.text != "—Å–µ–≥–æ–¥–Ω—è" else None

    add_product(name, variations, price, delivery, include_delivery, date)
    await message.answer(f"–¢–æ–≤–∞—Ä '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∫–ª–∞–¥ ‚úÖ")
    await state.finish()

# /—Å–∫–ª–∞–¥
async def cmd_show_stock(message: types.Message):
    products = get_all_products()
    if not products:
        await message.answer("–°–∫–ª–∞–¥ –ø—É—Å—Ç ‚ùå")
    else:
        text = "üì¶ –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ:\n\n"
        for p in products:
            text += f"üîπ {p['name']}:\n"
            for v in p['variations']:
                text += f"  ‚Ä¢ {v['color']} / {v['size']} ‚Äî {v['quantity']} —à—Ç\n"
        await message.answer(text)

def register_handlers_stock(dp: Dispatcher):
    dp.register_message_handler(cmd_add_position, commands=['–¥–æ–±–∞–≤–∏—Ç—å_–ø–æ–∑–∏—Ü–∏—é'])
    dp.register_message_handler(cmd_show_stock, commands=['—Å–∫–ª–∞–¥'])
    dp.register_message_handler(process_name, state=AddProduct.name)
    dp.register_message_handler(process_variations, state=AddProduct.variations)
    dp.register_message_handler(process_price, state=AddProduct.price)
    dp.register_message_handler(process_delivery, state=AddProduct.delivery_cost)
    dp.register_message_handler(process_include_delivery, state=AddProduct.include_delivery)
    dp.register_message_handler(process_date, state=AddProduct.date)
