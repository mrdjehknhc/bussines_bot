from aiogram import types, Dispatcher
from database import add_note, get_all_notes, delete_note

# /–¥–æ–±–∞–≤–∏—Ç—å_–∑–∞–º–µ—Ç–∫—É
async def cmd_add_note(message: types.Message):
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:")
    await NoteStates.waiting_for_note.set()

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

class NoteStates(StatesGroup):
    waiting_for_note = State()

@NoteStates.waiting_for_note.handler()
async def process_note_text(message: types.Message, state: FSMContext):
    note_text = message.text
    add_note(note_text)
    await message.answer("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    await state.finish()

# /–∑–∞–º–µ—Ç–∫–∏
async def cmd_show_notes(message: types.Message):
    notes = get_all_notes()
    if not notes:
        await message.answer("–ó–∞–º–µ—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    text = "üìí <b>–ó–∞–º–µ—Ç–∫–∏:</b>\n\n"
    for n in notes:
        text += f"üóíÔ∏è {n['text']} (ID: {n['id']})\n"
    text += "\n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å, –Ω–∞–ø–∏—à–∏ /—É–¥–∞–ª–∏—Ç—å_–∑–∞–º–µ—Ç–∫—É ID"

    await message.answer(text, parse_mode="HTML")

# /—É–¥–∞–ª–∏—Ç—å_–∑–∞–º–µ—Ç–∫—É
async def cmd_delete_note(message: types.Message):
    try:
        _, note_id = message.text.split()
        deleted = delete_note(int(note_id))
        if deleted:
            await message.answer("üóëÔ∏è –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
        else:
            await message.answer("‚ùå –ó–∞–º–µ—Ç–∫–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /—É–¥–∞–ª–∏—Ç—å_–∑–∞–º–µ—Ç–∫—É ID")

def register_handlers_notes(dp: Dispatcher):
    dp.register_message_handler(cmd_add_note, commands=["–¥–æ–±–∞–≤–∏—Ç—å_–∑–∞–º–µ—Ç–∫—É"])
    dp.register_message_handler(cmd_show_notes, commands=["–∑–∞–º–µ—Ç–∫–∏"])
    dp.register_message_handler(cmd_delete_note, commands=["—É–¥–∞–ª–∏—Ç—å_–∑–∞–º–µ—Ç–∫—É"])
    dp.register_message_handler(process_note_text, state=NoteStates.waiting_for_note)
